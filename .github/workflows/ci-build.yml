name: CI Build Images

on: 
  push: 
    branches: [master]
    paths-ignore:
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/ci-build.yml'
    - 'etc/**'
    - 'testing/**'
    - 'scripts/**'
    - 'recycle-bin/**'
    - '.vscode/**'
  pull_request:
    branches: [master]
    
env:
  #DOCKER_TAG: ${{ github.run_id }}
  VERSION: 0.4.3
  DOCKER_REPO: daprstore  
  DOCKER_USER: bcdemo
  DOCKER_REG: bcdemo.azurecr.io
  STORAGE_ACCT_NAME: bcmisc

jobs:
  #
  # ===== Testing & code checking ======
  #
  runTestsLinting:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v1

    - name: Set Go version and paths
      uses: actions/setup-go@v2
      with:
        go-version: '^1.14.0'

    - name: Install extra test & build tools
      run: |
        go get -u golang.org/x/lint/golint
        go get gotest.tools/gotestsum
        npm i --prefix $HOME/tmp xunit-viewer

    - name: Check code - gofmt, golint & ESLint
      run: make lint gofmt

    - name: Run all unit tests
      run: make test-output

    - name: Generate test & code coverage reports
      if: ${{ success() || failure() }}
      run: make reports

    - name: Upload reports
      if: ${{ success() || failure() }}
      run: |
        az storage blob upload-batch --account-name $STORAGE_ACCT_NAME --account-key ${{ secrets.STORAGE_KEY }} \
          --source ./output --destination \$web/${{ github.run_id }} --no-progress > /dev/null
        echo -e "\n\n================================================================================================================"
        echo -e "üìúüåç‚úÖ Test reports uploaded and viewable here - https://$STORAGE_ACCT_NAME.z6.web.core.windows.net/${{ github.run_id }}/"
        echo -e "================================================================================================================\n\n"
        echo "::warning ::Test results URL: https://$STORAGE_ACCT_NAME.z6.web.core.windows.net/${{ github.run_id }}/"
        
  #
  # ===== Build container images ======
  #
  buildImages:
    runs-on: ubuntu-latest
    needs: runTestsLinting

    steps:
    - name: Checkout source
      uses: actions/checkout@v1

    - name: Run all builds
      run: |
        make docker DOCKER_TAG=${{ github.run_id }} VERSION=$VERSION
        make docker DOCKER_TAG=latest VERSION=$VERSION

    # =====================================================================
    # Steps after this are only run when merging or pushing into master
    # =====================================================================

    - name: Login to registry 
      if: github.event_name == 'push'
      run:  docker login $DOCKER_REG -u $DOCKER_USER -p ${{ secrets.ACR_PASSWORD }} 

    - name: Push to Dockerhub
      if: github.event_name == 'push'
      run: |
        make push DOCKER_TAG=${{ github.run_id }}
        make push DOCKER_TAG=latest

    # =====================================================================
    # Optional deployment trigger
    # =====================================================================

    - name: Trigger deployment
      if: github.event_name == 'push'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.DEPLOYMENT_PAT }}
        event-type: 'Continuous Deployment'
        client-payload: '{"imageTag": "${{ github.run_id }}"}'        