name: CI Build App

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "cmd/**"
      - "web/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  checks: write

env:
  VERSION: 0.8.6
  BUILD_INFO: "Build:development / Workflow:${{ github.workflow }} / RunId:${{ github.run_id }} / Ref:${{ github.ref }} / SHA:${{ github.sha }} / ImageTag:${{ github.run_id }}"
  IMAGE_REG: ghcr.io
  IMAGE_TAG: ${{ github.run_id }}

jobs:
  # ===== Testing & code checking ======
  tests-linting:
    name: "Run Lint & All Tests"
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.createTag.outputs.IMAGE_TAG }}

    steps:
      - name: "Checkout source"
        uses: actions/checkout@v4

      - name: "Set Go version and paths"
        uses: actions/setup-go@v5
        with:
          go-version: "^1.24.0"

      - name: "Install extra Go tools"
        run: |
          go install github.com/jstemmer/go-junit-report@latest
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

      - name: "Check code & lint"
        run: |
          go get ./...
          make lint

      - name: "Run all unit tests and generate reports"
        run: |
          make test-report

      - name: "Test Report (Frontend)"
        uses: phoenix-actions/test-reporting@v15
        if: success() || failure()
        with:
          name: Frontend Tests
          path: frontend-test-results.xml
          reporter: java-junit

      - name: "Test Report (Unit Tests)"
        uses: phoenix-actions/test-reporting@v15
        if: success() || failure()
        with:
          name: Unit Tests
          path: unit-test-results.xml
          reporter: java-junit

      - name: "Dapr tool installer"
        uses: dapr/setup-dapr@v1
        with:
          version: "1.15.1"

      - name: "Initialize Dapr"
        run: |
          dapr init

      - name: "Run API integration tests, with report"
        run: |
          make run &
          sleep 30
          make test-api-report

      - name: "Test Report (API)"
        uses: phoenix-actions/test-reporting@v15
        if: success() || failure()
        with:
          name: API Integration Tests
          path: api-test-results.xml
          reporter: java-junit

  # ===== Build container images ======
  build-images:
    name: "Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: tests-linting
    strategy:
      matrix:
        serviceName: [cart, orders, users, products, frontend]

    steps:
      - name: "Checkout source"
        uses: actions/checkout@v3

      - name: "Run build"
        run: |
          make docker-build-${{ matrix.serviceName }} IMAGE_TAG=$IMAGE_TAG VERSION=$VERSION BUILD_INFO="$BUILD_INFO"
          make docker-build-${{ matrix.serviceName }} IMAGE_TAG=latest VERSION=$VERSION BUILD_INFO="$BUILD_INFO"

      # Steps after this are only run when merging or pushing into main
      - name: "Push to container registry"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login $IMAGE_REG -u $GITHUB_ACTOR --password-stdin
          make docker-push-${{ matrix.serviceName }} IMAGE_TAG=$IMAGE_TAG
          make docker-push-${{ matrix.serviceName }} IMAGE_TAG=latest
